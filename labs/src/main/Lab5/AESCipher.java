/**
 * file: AESCipher.java
 * author: Andre Esteves Dias
 * course: MSCS 630L 711 21S
 * assignment: lab 5
 * due date: April 11, 2021
 */

package main.Lab5;

/**
 * The following class contains the methods necessary to produce round keys
 * given a 16-hex string as input.
 */
public class AESCipher {

  //S-Box hex values to transform bytes.
  private static int[] sBox = new int[]{
          0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
          0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
          0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
          0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
          0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
          0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
          0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
          0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
          0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
          0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
          0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
          0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
          0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
          0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
          0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
          0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
  };

  //Round constant hex values.
  private static final int[] rCon = {
          0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
          0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,
          0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A,
          0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8,
          0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF,
          0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC,
          0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B,
          0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3,
          0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94,
          0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
          0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35,
          0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F,
          0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04,
          0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63,
          0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD,
          0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D
  };

  //Galois Multiplication by 2 lookup table.
  private static final int[] gM2 = {
          0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
          0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
          0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
          0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
          0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
          0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
          0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
          0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
          0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
          0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
          0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
          0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
          0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
          0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
          0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
          0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5};

  //Galois Multiplication by 3 lookup table.
  private static final int[] gM3 = {
          0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
          0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
          0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
          0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
          0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
          0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
          0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
          0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
          0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
          0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
          0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
          0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
          0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
          0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
          0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
          0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a};

  /**
   *aesRoundKeys receives a length 16-hex string and applies the AES
   * algorithm to produce 10 round keys as a string in each element of the
   * output array. The first element of the output array will contain the
   * initial input string.
   * @param KeyHex Initial length 16-hex string
   * @return roundKeysHex is an array with 11 elements where each element
   * contains one round key
   */
  public static String[] aesRoundKeys (String KeyHex) {

    //Instantiate array with 11 elements for final round keys.
    String[] roundKeysHex = new String[11];

    //Split KeyHex input string into the 4x4 array.
    int rowNum = 0;
    int colNum = 0;
    String[][] Ke = new String[4][4];

    for (int i = 0; i < KeyHex.length(); i += 2) {
      Ke[rowNum][colNum] = "" + KeyHex.charAt(i) + KeyHex.charAt(i + 1);
      rowNum++;

      if (rowNum == 4) {
        rowNum = 0;
        colNum++;
      }
    }

    /**
     * Instantiate the 4x44 matrix called W and start filling the matrix
     * accordingly. I work with the matrix using a for loop that will run 44
     * times since there are 44 columns.
     */

    String[][] W = new String[4][44];

    for (int i = 0; i < 44; i++) {

      //First, transfer the contents of Ke to the first four columns of W.
      if (i < 4) {
        W[i][0] = Ke[i][0];
        W[i][1] = Ke[i][1];
        W[i][2] = Ke[i][2];
        W[i][3] = Ke[i][3];
      }

      /**
       * Once the first four columns are filled from Ke, there are two
       * options. Whenever we reach the fourth column, the if statement will
       * be true and create a temporary array and store the previous column.
       * Perform a shift of the columns to the left where the first is now
       * last. Next, transform each of the bytes using the S-Box. Get the
       * Rcon constant for the i-th round. XOR using the corresponding round
       * constant. Lastly XOR the corresponding elements from the fourth past
       * column.
       */

      else {
        if (i % 4 == 0) {

          String[] tempW = new String[4];

          tempW[0] = XOR(Integer.parseInt(aesRCon(i), 16),
                  Integer.parseInt(aesSBox(Integer.parseInt(W[1][i - 1], 16)),
                          16));
          tempW[1] = aesSBox(Integer.parseInt(W[2][i - 1], 16));
          tempW[2] = aesSBox(Integer.parseInt(W[3][i - 1], 16));
          tempW[3] = aesSBox(Integer.parseInt(W[0][i - 1], 16));

          for (int j = 0; j < 4; j++) {
            W[j][i] = XOR(Integer.parseInt(W[j][i - 4], 16),
                    Integer.parseInt(tempW[j], 16));
          }
        }

        /**
         * When the column is not a multiple of 4, we XOR the fourth past and
         * last column.
         */
        else {
          for (int j = 0; j < 4; j++) {
            W[j][i] = XOR(Integer.parseInt(W[j][i - 4], 16),
                    Integer.parseInt(W[j][i - 1], 16));
          }
        }
      }
    }

    /**
     * Using StringBuilder to append the elements of each 4 columns to create
     * the round keys from W (4x44 matrix). The first four columns will be the
     * input hex key.
     */
    StringBuilder sB = new StringBuilder();
    int strNum = 0;
    for(int i = 0; i < 44; i++) {
      for (int j = 0; j < 4; j++) {
        sB.append(W[j][i]);
        if ((i+1)%4 == 0 && j == 3) {
          roundKeysHex[strNum] = sB.toString().toUpperCase();
          strNum++;
          sB.delete(0,32);
        }
      }
    }
    return roundKeysHex;
  }

  /**
   *Performs the XOR operation.
   * @param L left hex
   * @param R right hex
   * @return formatted XOR string
   */
  public static String XOR(int L, int R) {
    /**
     * 0 means the result will be zero padded. Width is 2. x means the result
     * will be formatted as a hexadecimal integer, uppercase.
     */
    return String.format("%02x", L^R);
  }

  /**
   *Method to retrieve each rounds constant from the rCon table.
   * @param round current round, i.
   * @return each rounds constant
   */
  public static String aesRCon(int round) {

    return Integer.toHexString((int) rCon[(int) Math.floor(round / 4)]).toUpperCase();
  }

  /**
   * Method to read S-Box to transform the existing hex value with
   * corresponding S-Box value.
   * @param inHex The byte that will be transformed.
   * @return The transformed byte.
   */
  public static String aesSBox(int inHex) {

    return Integer.toHexString((int) sBox[inHex]).toUpperCase();
  }

  /**
   * Method will XOR the two entries to add a new round key.
   * @param sHex 4x4 State Matrix
   * @param keyHex 4x4 RoundKey Matrix
   * @return The output is the XOR of the corresponding input sHex and keyHex
   * Matrix.
   */
  public static String[][] AESStateXOR(String[][] sHex, String[][] keyHex){

    String[][] aesAddKey = new String[4][4];
    for(int i=0; i<4; i++){
      for(int j=0; j<4; j++){
        aesAddKey[i][j] = XOR(Integer.parseInt(sHex[i][j],16),
                Integer.parseInt(keyHex[i][j],16 )).toUpperCase();
      }
    }
    return aesAddKey;
  }

  /**
   * Method will run the entries through the S-Box to get the subbed values.
   * @param inStateHex is the output 4x4 Matrix from the AESStateXOR method.
   * @return The output is a 4X4 Matrix that has been substituted with S-Box
   */
  public static String[][] AESNibbleSub(String[][] inStateHex){
    String[][] sub = new String[4][4];
    for(int i=0; i<4; i++){
      for(int j=0; j<4; j++){
        sub[i][j] = aesSBox(Integer.parseInt(inStateHex[i][j],16));
      }
    }
    return sub;
  }

  /**
   * Method will keep the first row the same. The bottom three rows will have
   * the columns moved around. The first column will move last and columns 2,
   * 3,4 will shift to the left.
   * @param inStateHex is the output 4X4 Matrix from the AESNibbleSub method.
   * @return resulting 4X4 Matrix where shift row operation has been completed.
   */
  public static String[][] AESShiftRow(String[][] inStateHex){
    String[][] shift = new String[4][4];
    shift[0] = inStateHex[0];
    for(int i=1; i<4; i++){
      for(int j=0; j<4; j++){
        shift[i][j] = inStateHex[i][(j+i)%4];
      }
    }
    return shift;
  }

  /**
   * This method will pass the values from the input matrix through the Galois
   * Multiplication by 2 lookup table (gM2) and Galois Multiplication by 3
   * lookup table (gM3). This takes the place of performing the dot product
   * between the column of inStateHex and the row of the Galois field.
   * @param inStateHex is the output 4x4 Matrix from the AESShiftRows method.
   * @return 4x4 Matrix column mixed by the Galois field.
   */
  public static String[][] AESMixColumn(String[][] inStateHex){
    String[][] mixed = new String[4][4];
    int[] state = new int[4];
    int[] temp = new int[4];

    //change input hex into int
    for(int i=0; i<4; i++){
      for(int j=0; j<4; j++){
        state[j] = Integer.parseInt(inStateHex[j][i],16);
      }

      temp[0] = gM2[state[0]]^gM3[state[1]]^state[2]^state[3];
      temp[1] = state[0]^gM2[state[1]]^gM3[state[2]]^state[3];
      temp[2] = state[0]^state[1]^gM2[state[2]]^gM3[state[3]];
      temp[3] = gM3[state[0]]^state[1]^state[2]^gM2[state[3]];

      for (int w=0; w<4; w++){
        mixed[w][i] = String.format("%02x",temp[w]);
      }
    }
    return mixed;
  }

  /**
   * Converts a string to a 4x4 matrix filling the column first before moving
   * on to the next column.
   * @param str input is a string
   * @return 4x4 matrix
   */
  public static String[][] strToMatrix(String str){
    int rowNum = 0;
    int colNum = 0;
    String[][] output = new String[4][4];

    for (int i = 0; i < str.length(); i += 2) {
      output[rowNum][colNum] = "" + str.charAt(i) + str.charAt(i + 1);
      rowNum++;

      if (rowNum == 4) {
        rowNum = 0;
        colNum++;
      }
    }
    return output;
  }

  /**
   * This method combines all of the previous methods together to produce the
   * ciphertext giving a plaintext string and a system key string. We first
   * determine the 11 round keys from the input keyHex. The we XOR the plain
   * text and the first round key. Next we loop 9 times performing nibble
   * sub, shift row, mix column, and AESStateXOR(add round key). Then we
   * perform the same steps but exclude the mix column step. Result is the
   * ciphertext.
   * @param pTextHex input plain text block, p, as a string.
   * @param keyHex input system key, Ke, as a string.
   * @return The ciphertext string stored in the zeroth index of an Array.
   */
  public static String[] AES(String pTextHex, String keyHex){
    String [] roundKeys = aesRoundKeys(keyHex);
    String [][] sHex = strToMatrix(pTextHex);
    String [][] key1 = strToMatrix(roundKeys[0]);
    String[][] cTextHex = AESStateXOR(sHex, key1);
    for (int i = 1; i<=10; i++){
      cTextHex = AESNibbleSub(cTextHex);
      cTextHex = AESShiftRow(cTextHex);
      if (i<=9){
        cTextHex = AESMixColumn(cTextHex);
      }
      cTextHex = AESStateXOR(cTextHex, strToMatrix(roundKeys[i]));
    }

    String [] answer = new String[1];
    StringBuilder sB = new StringBuilder();
    int strNum = 0;
    for(int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        sB.append(cTextHex[j][i]);
        answer[0] = sB.toString().toUpperCase();
      }
    }
    return answer;
  }
}
